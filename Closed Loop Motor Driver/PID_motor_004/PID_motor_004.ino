#include "AutoPID.h"
#include <Wire.h>
#include <I2C_Anything.h>

#define DEBUG
#define maxOp 245
#define minOp 10
#define kp 1
#define ki 0.79
#define kd 0.98
uint8_t I2C_Addr = 0x50; //last 4 bits will be generated by PINC last 4 bits

long rpm, x, pret, avgver, setRpm = 100 , diff = 1;
uint8_t pwmOut;
int rpmIN;
AutoPID pid(&avgver, &setRpm, &pwmOut, minOp, maxOp, kp, ki, kd);

volatile long time1, time2, dt;
volatile long f;
volatile uint8_t h, count;
volatile boolean haveData = false;
volatile int data = 0;

void isr1() {
  if (h == 0) {
    time1 = micros();
    h = 1;
  } else
  {
    time2 = micros();
    h = 0;
  }
  f = time1 - time2;
  dt = abs(f);
}

void setup() {
  pinMode(7, OUTPUT);
  pinMode(9, 1);
  pinMode(10, 1);
  pinMode(3, INPUT_PULLUP);
  attachInterrupt(1, isr1, RISING);
  Serial.begin(115200);
  TCCR1A = 0b10100001;
  TCCR1B = 0b00000001;
  OCR1A = 0;
  OCR1B = 0;
  Wire.begin(42);
  Wire.onReceive (receiveEvent);

  flashLed();

}

void loop() {
  x = dt;
  if (pret != x) {
    rpm = (60000.0 / x) * 14;
    avgver = runningAverage(rpm);
    Serial.println(avgver);
    //pret=x;
  }
  pid.run();
  if (haveData) {
    rpmIN = data;
    haveData = false;
#ifdef DEBUG
    Serial.print("Got rpm:");
    Serial.println(data);
#endif
  }

  if (rpmIN > 0) {
    OCR1A = pwmOut;
    OCR1B = 0;
  } else if (rpmIN < 0) {
    OCR1A = 0;
    OCR1B = pwmOut;
  } else {
    OCR1B = 0;
    OCR1A = 0;
  }
}

long runningAverage(int M) {
#define LM_SIZE 64
  static int LM[LM_SIZE];      // LastMeasurements
  static byte index = 0;
  static long sum = 0;
  static byte count = 0;

  // keep sum updated to improve speed.
  sum -= LM[index];
  LM[index] = M;
  sum += LM[index];
  index++;
  index = index % LM_SIZE;
  if (count < LM_SIZE) count++;

  return sum / count;
}

void flashLed() {
  pinMode(7, OUTPUT);
  digitalWrite(7, HIGH);
  delay(500);
  digitalWrite(7, LOW);
  delay(500);
  digitalWrite(7, HIGH);
  delay(500);
  digitalWrite(7, LOW);
  delay(500);
  digitalWrite(7, HIGH);
  delay(1000);
  digitalWrite(7, LOW);
  delay(200);
}

uint8_t getI2Caddr() {
  DDRC = 0b00000000;
  uint8_t pinc;
  pinc = PINC;
  pinc &= 0x0f;
  return (pinc + I2C_Addr);
}

void receiveEvent (int howMany)
{
  if (howMany >= (sizeof data))
  {
    I2C_readAnything (data);
    haveData = true;
  }  // end if have enough data
}  // end of receiveEvent
